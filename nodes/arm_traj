#!/usr/bin/env python

from sympy.utilities.lambdify import lambdify
import rospy
import sympy as sym
from sympy import sin, cos, acos, atan2, pi, sqrt
from sensor_msgs.msg import JointState

class arm_trajectory:
    def __init__(self):
        self.pub = rospy.Publisher("joint_states", JointState, queue_size = 10)

        self.T = rospy.get_param('Period')
        self.L1 = rospy.get_param('Length1')
        self.L2 = rospy.get_param('Length2')

        self.rate = rospy.Rate(20)

    def get_xy(self, t):    
        self.h = (2/3)*(self.L1 + self.L2)
        self.x = 0.9*cos(2*pi*t/self.T)*sqrt((self.L1 + self.L2)**2 - self.h**2)
        self.y = (2/3)*(self.L1 + self.L2)

        return self.x, self.y

    def get_theta(self, x, y):
        # Equations below sourced from Lynch, Park, Modern Robotics Chapter 6
        beta = acos((self.L1**2 + self.L2**2 - x**2 - y**2)/(2*self.L1*self.L2))
        alpha = acos((x**2 + y**2 + self.L1**2 - self.L2**2)/(2*self.L1*sqrt(x**2 + y**2)))
        gamma = atan2(y,x)
        # Equations above sourced from Lynch, Park, Modern Robotics Chapter 6

        self.theta1 = gamma - alpha
        self.theta2 = pi - beta

        return self.theta1, self.theta2

    def loopy(self):
        while not rospy.is_shutdown():
            t = rospy.get_time()
            x,y = self.get_xy(t)
            theta1, theta2 = self.get_theta(x,y)

            self.joints = JointState()
            self.joints.header.stamp = rospy.Time.now()
            self.joints.name = ['base_joint', 'link_joint']
            self.joints.velocity = [0, 0]
            self.joints.effort = [0, 0]
            self.joints.position = [theta1, theta2] 
        
            self.pub.publish(self.joints)
            self.rate.sleep()


if __name__ == '__main__':
    rospy.init_node('arm_traj')

    arm = arm_trajectory()
    arm.loopy()

    # Spin() simply keeps python from exiting until this node is stopped
    rospy.spin()


