#!/usr/bin/env python
# The purpose of this node is to allow you to use the turtlesim node
# instead of a real robot while refining your trajectory

import rospy
from turtlesim.msg import Pose
from nav_msgs.msg import Odometry
import tf2_ros
from geometry_msgs.msg import TransformStamped


def convert_pose(Pose):
    '''This is the callback function for the Pose subscriber'''
    # read in x,y,z, lin and ang vel from pose

    #odom2baselink



    broadcaster = tf2_ros.TransformBroadcaster()

    #copy and paste stuff from trajectory starting at quaternion

    #broadcast odom2baselink

    pub = rospy.Publisher("odom", Odometry, pub_callback)

    #geometry_msgs???
    #odom = Odometry()
    #set odom header, frame_id, child_id, position, orientation, and twist

    #publish odom


def pub_callback(req):
    '''This is the callback function for the Odometry publisher'''
    something = 0

if __name__ == '__main__':
    rospy.init_node('simodom')

    sub1 = rospy.Subscriber("turtle1/pose", Pose, convert_pose)

    

    # Spin() simply keeps python from exiting until this node is stopped
    rospy.spin()