#!/usr/bin/env python
""" 
Subscribes to and converts pose from turtlesim into both a transform that is broadcasted as odometry and
broadcasted as odom_tf transform

SUBSCRIBERS:
  + turtle1/pose Pose ~ subscribes to pose information from turtlesim, runs convert_pose function

PUBLISHERS:
  + odom Odometry ~ publishes odometry of turtle

BROADCASTERS:
  + broadcaster TransformBroadcaster ~ broadcasts odom_tf transform
"""

import rospy
from turtlesim.msg import Pose
from nav_msgs.msg import Odometry
import tf2_ros
from geometry_msgs.msg import TransformStamped, Twist, Vector3
from tf_conversions import transformations
from sensor_msgs.msg import JointState

def convert_pose(Pose):
    """ Callback function for pose subscriber. Converts pose into odom_tf transform
    and Odometry message. Then broadcasts and publishes them, respectively.

      Args:
        Pose : turtle1/pose data retrieved from turtlesim

      Returns:
        None
    """
    # Gather pose data from turtlesim Pose message
    x = Pose.x
    y = Pose.y
    theta = Pose.theta
    lin_velocity = Pose.linear_velocity
    ang_velocity = Pose.angular_velocity

    # BROADCASTER STUFF ---------------------------------------
    # Create broadcaster
    broadcaster = tf2_ros.TransformBroadcaster()

    #Set up odom_tf type?
    odom_tf = TransformStamped()

    # Set odom_tf stamp, frame_id, child_id
    odom_tf.header.stamp = rospy.Time.now()
    odom_tf.header.frame_id = "odom"
    odom_tf.child_frame_id = "base_footprint"

    # Set quaternion
    quaternion = transformations.quaternion_from_euler(0,0,theta)

    # Set world_tf transforms
    odom_tf.transform.translation.x = x - 5.5
    odom_tf.transform.translation.y = y - 5.5
    odom_tf.transform.translation.z = 0
    odom_tf.transform.rotation.x = quaternion[0]
    odom_tf.transform.rotation.y = quaternion[1]
    odom_tf.transform.rotation.z = quaternion[2]
    odom_tf.transform.rotation.w = quaternion[3]

    # Send broadcast of odom_tf
    broadcaster.sendTransform(odom_tf)

    # PUBLISHER STUFF ---------------------------------------
    # Create odometry publisher
    pub = rospy.Publisher("odom", Odometry)

    # Initialize odom variable of type Odometry
    odom = Odometry()

    # Set time stamp, frame_id, and child_frame_id for odom
    odom.header.stamp = rospy.Time.now()
    odom.header.frame_id = "odom"
    odom.child_frame_id = 'base_footprint'

    # Set odom position values (offsetting by 5.5 to move roughly to center of plane)
    odom.pose.pose.position.x = x - 5.5
    odom.pose.pose.position.y = y - 5.5
    odom.pose.pose.position.z = 0

    # Create quaternion for odom
    odom_quat = transformations.quaternion_from_euler(0,0,theta)

    # Set odom orientation values using quaternion
    odom.pose.pose.orientation.x = odom_quat[0]
    odom.pose.pose.orientation.y = odom_quat[1]
    odom.pose.pose.orientation.z = odom_quat[2]
    odom.pose.pose.orientation.w = odom_quat[3]
    odom.twist.twist = Twist(Vector3(x = lin_velocity, y = 0, z = 0), Vector3(x = 0, y = 0, z = ang_velocity))

    # Publish populated Odometry message 
    pub.publish(odom)

if __name__ == '__main__':
    # Initialize node
    rospy.init_node('simodom')

    # Create subscriber to turtlesim pose
    sub1 = rospy.Subscriber("turtle1/pose", Pose, convert_pose)

    # Spin() simply keeps python from exiting until this node is stopped
    rospy.spin()