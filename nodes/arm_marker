#!/usr/bin/env python

import rospy

from math import cos, sin, pi
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from visualization_msgs.msg import Marker
import tf2_ros

T = 10

if __name__ == '__main__':
    
    pub_mark = rospy.Publisher('visualization_marker', Marker, queue_size = 10)
    rospy.init_node('arm_marker')
    rate = rospy.Rate(1000)

     # when we publish, rviz will be adding/modifying an existing marker. The other option is DELETE

    count = 0

    buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(buffer)

    while not rospy.is_shutdown(): # calculate circular coordinates

        try:
            trans = buffer.lookup_transform('base_link', 'end_effector', rospy.Time())
        except:
            continue

        marker = Marker()
        marker.lifetime = rospy.Duration(T/5)
        marker.header.frame_id = 'end_effector'
        marker.header.stamp = rospy.Time()
        marker.action = marker.ADD

        marker.id = count

        x = trans.transform.translation.x 

        if x > 0:
            marker.type = Marker.CUBE
            marker.color.a = 1.0
            marker.color.r = 1
            marker.color.g = 0
            marker.color.b = 0
        elif x < 0:
            marker.type = Marker.SPHERE
            marker.color.a = 1.0
            marker.color.r = 0
            marker.color.g = 0
            marker.color.b = 1

        marker.pose.orientation.x = 0
        marker.pose.orientation.y = 0
        marker.pose.orientation.z = 0
        marker.pose.orientation.w = 1

        marker.pose.position.x = 0
        marker.pose.position.y = 0
        marker.pose.position.z = 0

        marker.scale.x = 0.1
        marker.scale.y = 0.1
        marker.scale.z = 0.1

        count += 1

        pub_mark.publish(marker)

        rate.sleep()

    rospy.spin()