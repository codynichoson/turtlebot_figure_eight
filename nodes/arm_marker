#!/usr/bin/env python

import rospy

from math import cos, sin, pi
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from visualization_msgs.msg import Marker
import tf2_ros

# t = 0

if __name__ == '__main__':
    
    pub_mark = rospy.Publisher('visualization_marker', Marker, queue_size = 10)
    rospy.init_node('circle')
    r = rospy.Rate(10) # 10 Hz

    marker = Marker()
    marker.header.frame_id = 'map' # frame marker is relative to
    marker.id = 0
    marker.action = marker.ADD # when we publish, rviz will be adding/modifying an existing marker. The other option is DELETE

while not rospy.is_shutdown(): # calculate circular coordinates

    buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(buffer)

    trans = buffer.lookup_transform('base_link', 'end_effector', rospy.Time())

    x = trans.transform.translation.x 

    if x > 0:
        marker.type = marker.ARROW
        marker.color.a = 1.0
        marker.color.r = 1
        marker.color.g = 0
        marker.color.b = 0
    elif x < 0:
        marker.type = marker.SPHERE
        marker.color.a = 1.0
        marker.color.r = 0
        marker.color.g = 0
        marker.color.b = 1
	
    marker.pose.orientation.x = 0
    marker.pose.orientation.y = 0
    marker.pose.orientation.z = 0
    marker.pose.orientation.w = 1 # Always? Quaternion?

    marker.pose.position.x = x
    marker.pose.position.y = 0
    marker.pose.position.z = 0 # making this t would make spiral

    marker.scale.x = 0.2
    marker.scale.y = 0.2
    marker.scale.z = 0.2

    pub_mark.publish(marker)
            
    # t += 1
    # if t == 100:
    #     t = 0
    # r.sleep() 