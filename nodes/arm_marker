#!/usr/bin/env python
""" 
Listens to transforms being broadcasted (the end-effector in this case) and publishes a
marker that is to be visualized using rviz

PUBLISHERS:
  + visualization_marker Marker ~ publishes marker to be visualized in rviz

LISTENERS:
  + listener TransformListener ~ listens to transforms being broadcasted
"""

import rospy
from math import cos, sin, pi
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from visualization_msgs.msg import Marker
import tf2_ros

# Read in period value from parameter
T = rospy.get_param('Period')

if __name__ == '__main__':
    # Initialize node
    rospy.init_node('arm_marker')

    # Create publisher for marker
    pub_mark = rospy.Publisher('visualization_marker', Marker, queue_size = 10)
    
    # Set publishing rate
    rate = rospy.Rate(1000)

    # Initialize count values (used to update marker id)
    count = 0

    # Set buffer
    buffer = tf2_ros.Buffer()

    # Set listener
    listener = tf2_ros.TransformListener(buffer)

    # Loop continiously
    while not rospy.is_shutdown():

        try:
            # Get transform between base_link and end_effector
            trans = buffer.lookup_transform('base_link', 'end_effector', rospy.Time())
        except:
            continue

        # Initalize marker
        marker = Marker()

        # Set duration, frame_id, time stamp, action type, and id for marker
        marker.lifetime = rospy.Duration(T/5)
        marker.header.frame_id = 'end_effector'
        marker.header.stamp = rospy.Time()
        marker.action = marker.ADD
        marker.id = count

        # Retrieve x value from transform
        x = trans.transform.translation.x 

        # Change marker depending on if x is positive/negative
        if x > 0:
            marker.type = Marker.CUBE
            marker.color.a = 1.0
            marker.color.r = 1
            marker.color.g = 0
            marker.color.b = 0
        elif x < 0:
            marker.type = Marker.SPHERE
            marker.color.a = 1.0
            marker.color.r = 0
            marker.color.g = 0
            marker.color.b = 1

        # Set marker orientation relative to end_effector
        marker.pose.orientation.x = 0
        marker.pose.orientation.y = 0
        marker.pose.orientation.z = 0
        marker.pose.orientation.w = 1

        # Set marker position relative to end_effector
        marker.pose.position.x = 0
        marker.pose.position.y = 0
        marker.pose.position.z = 0

        # Set scale of marker
        marker.scale.x = 0.1
        marker.scale.y = 0.1
        marker.scale.z = 0.1

        # Increment count (so id is changed)
        count += 1

        # Publish the marker
        pub_mark.publish(marker)

        rate.sleep()

    rospy.spin()