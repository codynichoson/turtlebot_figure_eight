#!/usr/bin/env python

import numpy as np
import rospy
from geometry_msgs.msg import Twist, Vector3, TransformStamped
from std_srvs.srv import Empty, EmptyResponse
import sympy as sym
import tf2_ros
from homework2.mymodule import trajectory
from tf_conversions import transformations


def pause_func():
    '''This is the callback function of the pause service'''

    # Publish velocities of zero
    pub.publish(Twist(Vector3(x = 0, y = 0, z = 0), Vector3(x = 0, y = 0, z = 0)))

def resume_func():

    # Publish velocities of something???
    pub.publish(Twist(Vector3(x = 1, y = 0, z = 0), Vector3(x = 0, y = 0, z = 0)))

def static_broadcast():
    #define theta_world as initial theta0
    theta_world = traj.theta0(0)

    # Create static broadcaster
    stat_broadcaster = tf2_ros.StaticTransformBroadcaster()

    #Set up worldtf type?
    world_tf = TransformStamped()

    # Set world_tf stamp, frame_id, child_id
    world_tf.header.stamp = rospy.Time.now()
    world_tf.header.frame_id = "world"
    world_tf.child_frame_id = "odom"

    # Set quaternion
    quaternion = transformations.quaternion_from_euler(0,0,theta_world)

    # Set world_tf transforms
    world_tf.transform.translation.x = 0
    world_tf.transform.translation.y = 0
    world_tf.transform.translation.z = 0
    world_tf.transform.rotation.x = quaternion[0]
    world_tf.transform.rotation.y = quaternion[1]
    world_tf.transform.rotation.z = quaternion[2]
    world_tf.transform.rotation.w = quaternion[3]

    stat_broadcaster.sendTransform(world_tf)

if __name__ == '__main__':
    rospy.init_node('trajectory')

    rate = rospy.Rate(50)
    
    pause = rospy.Service("pause", Empty, pause_func) # Create pause service
    resume = rospy.Service("resume", Empty, resume_func) # Create resume service

    # Retrieve parameters
    W = rospy.get_param('width')
    H = rospy.get_param('height')
    T = rospy.get_param('period')
    #rate = rospy.get_param('~rate')

    # Use Python package to calculate trajectory stuff
    traj = trajectory(W, H, T)

    # Create world frame
    static_broadcast()

    # Set publisher for cmd_vel
    pub = rospy.Publisher("turtle1/cmd_vel", Twist, queue_size = 10)

    while not rospy.is_shutdown():
        t = rospy.get_time()
        pub.publish(Twist(Vector3(x = traj.lin_vel(t), y = 0, z = 0), Vector3(x = 0, y = 0, z = traj.ang_vel(t))))
        rate.sleep()

    # Spin() simply keeps python from exiting until this node is stopped
    rospy.spin()